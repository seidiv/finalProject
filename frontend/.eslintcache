[{"/home/sajad/Desktop/finalproject/frontend/src/index.js":"1","/home/sajad/Desktop/finalproject/frontend/src/components/layout/Header.js":"2","/home/sajad/Desktop/finalproject/frontend/src/containers/App.js":"3","/home/sajad/Desktop/finalproject/frontend/src/store/store.js":"4","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/index.js":"5","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/mainboards.js":"6","/home/sajad/Desktop/finalproject/frontend/src/store/actions/types.js":"7","/home/sajad/Desktop/finalproject/frontend/src/components/mainboards/MainboardList.js":"8","/home/sajad/Desktop/finalproject/frontend/src/store/actions/mainboards.js":"9","/home/sajad/Desktop/finalproject/frontend/src/components/mainboards/MainboardCard.js":"10","/home/sajad/Desktop/finalproject/frontend/src/components/layout/Alerts.js":"11","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/errors.js":"12","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/messages.js":"13","/home/sajad/Desktop/finalproject/frontend/src/components/layout/SearchBox.js":"14","/home/sajad/Desktop/finalproject/frontend/src/store/actions/search.js":"15","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/search.js":"16","/home/sajad/Desktop/finalproject/frontend/src/components/accounts/Login.js":"17","/home/sajad/Desktop/finalproject/frontend/src/components/accounts/RegisterMainboard.js":"18","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/auth.js":"19","/home/sajad/Desktop/finalproject/frontend/src/components/common/PrivateRoute.js":"20","/home/sajad/Desktop/finalproject/frontend/src/store/actions/auth.js":"21","/home/sajad/Desktop/finalproject/frontend/src/store/actions/messages.js":"22","/home/sajad/Desktop/finalproject/frontend/src/components/layout/scroll.js":"23","/home/sajad/Desktop/finalproject/frontend/src/store/actions/relatedSensors.js":"24","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/relatedSensors.js":"25","/home/sajad/Desktop/finalproject/frontend/src/components/sensors/SensorList.js":"26","/home/sajad/Desktop/finalproject/frontend/src/components/sensors/SensorCard.js":"27","/home/sajad/Desktop/finalproject/frontend/src/store/actions/sensorTypes.js":"28","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/sensorTypes.js":"29","/home/sajad/Desktop/finalproject/frontend/src/components/charts/Chart.js":"30","/home/sajad/Desktop/finalproject/frontend/src/store/actions/sensorValue.js":"31","/home/sajad/Desktop/finalproject/frontend/src/components/charts/Table.js":"32","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/sensorValueItem.js":"33","/home/sajad/Desktop/finalproject/frontend/src/components/accounts/RegisterSensorType.js":"34","/home/sajad/Desktop/finalproject/frontend/src/components/sensors/SensorTypeList.js":"35","/home/sajad/Desktop/finalproject/frontend/src/components/sensors/SensorTypeCard.js":"36","/home/sajad/Desktop/finalproject/frontend/src/components/mainboards/RegisterNewSensor.js":"37","/home/sajad/Desktop/finalproject/frontend/src/store/actions/host.js":"38"},{"size":250,"mtime":1612165664799,"results":"39","hashOfConfig":"40"},{"size":3774,"mtime":1612718476161,"results":"41","hashOfConfig":"40"},{"size":3438,"mtime":1612720807010,"results":"42","hashOfConfig":"40"},{"size":396,"mtime":1612165664803,"results":"43","hashOfConfig":"40"},{"size":557,"mtime":1612369443828,"results":"44","hashOfConfig":"40"},{"size":387,"mtime":1612165664803,"results":"45","hashOfConfig":"40"},{"size":894,"mtime":1612720702773,"results":"46","hashOfConfig":"40"},{"size":1906,"mtime":1612369443824,"results":"47","hashOfConfig":"40"},{"size":716,"mtime":1613122945672,"results":"48","hashOfConfig":"40"},{"size":1976,"mtime":1612716385493,"results":"49","hashOfConfig":"40"},{"size":1737,"mtime":1612720623604,"results":"50","hashOfConfig":"40"},{"size":381,"mtime":1612165664803,"results":"51","hashOfConfig":"40"},{"size":318,"mtime":1612369443828,"results":"52","hashOfConfig":"40"},{"size":936,"mtime":1612165664799,"results":"53","hashOfConfig":"40"},{"size":168,"mtime":1612165664803,"results":"54","hashOfConfig":"40"},{"size":854,"mtime":1612165664803,"results":"55","hashOfConfig":"40"},{"size":2896,"mtime":1612429797284,"results":"56","hashOfConfig":"40"},{"size":5911,"mtime":1612433406817,"results":"57","hashOfConfig":"40"},{"size":1314,"mtime":1612369443828,"results":"58","hashOfConfig":"40"},{"size":575,"mtime":1612165664799,"results":"59","hashOfConfig":"40"},{"size":4277,"mtime":1613122907928,"results":"60","hashOfConfig":"40"},{"size":337,"mtime":1612369443828,"results":"61","hashOfConfig":"40"},{"size":364,"mtime":1612165664799,"results":"62","hashOfConfig":"40"},{"size":1958,"mtime":1613123013668,"results":"63","hashOfConfig":"40"},{"size":711,"mtime":1612720460309,"results":"64","hashOfConfig":"40"},{"size":2426,"mtime":1612369443824,"results":"65","hashOfConfig":"40"},{"size":1804,"mtime":1612369443824,"results":"66","hashOfConfig":"40"},{"size":1615,"mtime":1613123064064,"results":"67","hashOfConfig":"40"},{"size":459,"mtime":1612369443828,"results":"68","hashOfConfig":"40"},{"size":3725,"mtime":1613124497502,"results":"69","hashOfConfig":"40"},{"size":258,"mtime":1612369443828,"results":"70","hashOfConfig":"40"},{"size":386,"mtime":1612369443824,"results":"71","hashOfConfig":"40"},{"size":463,"mtime":1612369443828,"results":"72","hashOfConfig":"40"},{"size":2308,"mtime":1612718874090,"results":"73","hashOfConfig":"40"},{"size":1549,"mtime":1612369443824,"results":"74","hashOfConfig":"40"},{"size":429,"mtime":1612717200662,"results":"75","hashOfConfig":"40"},{"size":3804,"mtime":1612755732234,"results":"76","hashOfConfig":"40"},{"size":44,"mtime":1613122836119,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"18xzarp",{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"80"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"80"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"80"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"80"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"/home/sajad/Desktop/finalproject/frontend/src/index.js",[],["178","179"],"/home/sajad/Desktop/finalproject/frontend/src/components/layout/Header.js",["180"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport propTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../store/actions/auth\";\n\nclass Header extends Component {\n    static propTypes = {\n        auth: propTypes.object.isRequired,\n        logout: propTypes.func.isRequired,\n    };\n    render() {\n        const { isAuthenticated, user } = this.props.auth;\n\n        const authLinks = (\n            <div className=\"container\">\n                <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#navbarTogglerDemo01\"\n                    aria-controls=\"navbarTogglerDemo01\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\"\n                >\n                    <span className=\"navbar-toggler-icon\" />\n                </button>\n                <div\n                    className=\"collapse navbar-collapse\"\n                    id=\"navbarTogglerDemo01\"\n                >\n                    <a\n                        className=\"navbar-brand  f4 br3 pa3 ma2 fw6 db bg-lightest-blue link hover-gray \"\n                        href=\"#\"\n                    >\n                        Home\n                    </a>\n                    <span className=\"navbar-text mr-3\">\n                        <strong>\n                            {user ? `Welcome ${user.username}` : \"\"}\n                        </strong>\n                    </span>\n                </div>\n                <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\n                    <li className=\"nav-item\">\n                        <Link\n                            to=\"/register-mainboard\"\n                            className=\"f4 br3 pa3 ma2 fw6 db bg-lightest-blue link hover-gray nav-link\"\n                        >\n                            Register Mainboard\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link\n                            to=\"/register-sensor-type\"\n                            className=\"f4 br3 pa3 ma2 fw6 db bg-lightest-blue link hover-gray nav-link\"\n                        >\n                            Register Sensor\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link\n                            to=\"/typesensors\"\n                            className=\"f4 br3 pa3 ma2 fw6 db bg-lightest-blue link hover-gray nav-link\"\n                        >\n                            Sensor Types\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link\n                            to=\"/login\"\n                            className=\"f4 br3 pa3 ma2 fw6 db bg-lightest-blue link hover-gray nav-link\"\n                            onClick={this.props.logout}\n                        >\n                            Logout\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n        const loginLinks = <div></div>;\n        return (\n            <nav\n                style={{\n                    background:\n                        \"linear-gradient(to left,rgba(7, 27, 82, 1) 0% , rgba(0, 128, 128, 1) 100%) \",\n                    height: \"100px\",\n                }}\n                className=\"navbar navbar-expand-sm navbar-light bg-light\"\n            >\n                {isAuthenticated ? authLinks : loginLinks}\n            </nav>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n});\nexport default connect(mapStateToProps, { logout })(Header);\n","/home/sajad/Desktop/finalproject/frontend/src/containers/App.js",["181","182"],"import React, { Component, Fragment } from \"react\";\nimport Header from \"../components/layout/Header\";\nimport Alerts from \"../components/layout/Alerts\";\nimport MainboardList from \"../components/mainboards/MainboardList\";\nimport RegisterNewSensor from \"../components/mainboards/RegisterNewSensor\";\nimport { Provider as AlertProvider } from \"react-alert\";\nimport {\n    HashRouter as Router,\n    Route,\n    Switch,\n    Redirect,\n} from \"react-router-dom\";\nimport AlertTemplate from \"react-alert-template-basic\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"../store/store\";\nimport PrivateRoute from \"../components/common/PrivateRoute\";\nimport Login from \"../components/accounts/Login\";\nimport Table from \"../components/charts/Table\";\nimport RegisterMainboard from \"../components/accounts/RegisterMainboard\";\nimport { loadUser } from \"../store/actions/auth\";\nimport SensorList from \"../components/sensors/SensorList\";\nimport RegisterSensorType from \"../components/accounts/RegisterSensorType\";\nimport SensorTypeList from \"../components/sensors/SensorTypeList\";\n// Alert options\nconst alertOptions = {\n    timeout: 3000,\n    position: \"top center\",\n};\nclass App extends Component {\n    componentDidMount() {\n        store.dispatch(loadUser());\n    }\n\n    render() {\n        return (\n            <Provider store={store}>\n                <AlertProvider template={AlertTemplate} {...alertOptions}>\n                    <Router>\n                        <div className=\"tc\">\n                            <Header />\n                            <Alerts />\n                            <Switch>\n                                <PrivateRoute\n                                    exact\n                                    path=\"/\"\n                                    component={MainboardList}\n                                />\n                                <PrivateRoute\n                                    exact\n                                    path=\"/register-mainboard\"\n                                    component={RegisterMainboard}\n                                />\n                                <PrivateRoute\n                                    exact\n                                    path=\"/register-sensor-type\"\n                                    component={RegisterSensorType}\n                                />\n                                <PrivateRoute\n                                    exact\n                                    path=\"/register-sensor\"\n                                    component={RegisterNewSensor}\n                                />\n                                <Route exact path=\"/login\" component={Login} />\n                                <PrivateRoute\n                                    exact\n                                    path=\"/sensors\"\n                                    component={SensorList}\n                                />\n                                <PrivateRoute\n                                    exact\n                                    path=\"/typesensors\"\n                                    component={SensorTypeList}\n                                />\n                                <PrivateRoute exact path=\"/charts\" component={Table} />\n                            </Switch>\n                        </div>\n                    </Router>\n                </AlertProvider>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","/home/sajad/Desktop/finalproject/frontend/src/store/store.js",[],"/home/sajad/Desktop/finalproject/frontend/src/store/reducers/index.js",[],"/home/sajad/Desktop/finalproject/frontend/src/store/reducers/mainboards.js",["183"],"import { GET_MAINBOARDS_LIST } from '../actions/types.js';\n\nconst initialState = {\n    mainboards: []\n}\n\nexport default function (state=initialState , action) {\n    switch (action.type) {\n        case GET_MAINBOARDS_LIST:\n\n            return {\n                ...state,\n                mainboards: action.payload\n            };\n    \n        default:\n            return state;\n    }    \n}","/home/sajad/Desktop/finalproject/frontend/src/store/actions/types.js",[],"/home/sajad/Desktop/finalproject/frontend/src/components/mainboards/MainboardList.js",["184"],"import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport {getMainboards} from '../../store/actions/mainboards';\nimport MainboardCard from './MainboardCard';\nimport SearchBox from '../layout/SearchBox';\nimport Scroll from '../layout/scroll';\nimport mainboards from '../../store/reducers/mainboards';\n\nclass MainboardList extends Component {\n    //     constructor() {\n    //     super()\n    //     this.state = {\n    //         filteredObjects = [],\n    //     }\n    //   }\n    static propTypes = {\n        mainboards: propTypes.array.isRequired,\n        filteredMainboards: propTypes.array.isRequired,\n    };\n\n    componentDidMount() {\n        this.props.getMainboards();\n        // console.log(this.props.mainboards);\n    }\n    render() {\n        let { mainboards, filteredMainboards } = this.props;\n        if (filteredMainboards === undefined) filteredMainboards = mainboards;\n\n        return !mainboards.length ? (\n            <h1>Loading</h1>\n        ) : (\n            <Fragment>\n                <SearchBox objectList={this.props.mainboards} />\n\n                <Scroll className=\"tc\">\n                    <div>\n                        {filteredMainboards.map((mb, i) => {\n                            return (\n                                <MainboardCard\n                                    key={i}\n                                    id={mb.id}\n                                    description={mb.description}\n                                />\n                            );\n                        })}\n                    </div>\n                </Scroll>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    mainboards: state.mainboards.mainboards,\n    filteredMainboards: state.searchObjects.filteredObjects\n});\n\n\nexport default connect(mapStateToProps , {getMainboards})(MainboardList);","/home/sajad/Desktop/finalproject/frontend/src/store/actions/mainboards.js",["185"],"import axios from \"axios\";\nimport { tokenConfig } from \"./auth\";\nimport { createMessage } from \"./messages\";\nimport { GET_ERRORS, GET_MAINBOARDS_LIST } from \"./types\";\nimport { host } from \"./host\";\n// GET MAINBOARD LIST\n\nexport const getMainboards = () => (dispatch, getState) => {\n    axios\n        .get(host + \"/api/mainboard/list\", tokenConfig(getState))\n        .then((res) => {\n            dispatch({\n                type: GET_MAINBOARDS_LIST,\n                payload: res.data,\n            });\n        })\n        .catch((err) => {\n            dispatch(\n                createMessage({\n                    somethingWentWrong: \"something went wrong. refresh !\",\n                })\n            );\n        });\n};\n","/home/sajad/Desktop/finalproject/frontend/src/components/mainboards/MainboardCard.js",[],"/home/sajad/Desktop/finalproject/frontend/src/components/layout/Alerts.js",["186"],"import React, { Component, Fragment } from \"react\";\nimport { withAlert } from \"react-alert\";\nimport { connect } from \"react-redux\";\nimport propTypes from \"prop-types\";\n\nclass Alerts extends Component {\n    static propTypes = {\n        error: propTypes.object.isRequired,\n        message: propTypes.object.isRequired,\n    };\n\n    componentDidUpdate(prevProps) {\n        // console.log(\"hello\");\n        const { error, alert, message } = this.props;\n        if (error != prevProps.error) {\n            if (error.msg.description) {\n                alert.error(`description: ${error.msg.description.join()}`);\n            }\n            if (error.msg.non_field_errors) {\n                alert.error(error.msg.non_field_errors.join());\n            }\n            if (error.msg.username) {\n                alert.error(error.msg.username.join());\n            }\n        }\n\n        if (message !== prevProps.message) {\n            if (message.sensorRegistered)\n                alert.success(message.sensorRegistered);\n\n            if (message.mainboardRegistered)\n                alert.success(message.mainboardRegistered);\n\n            if (message.allFieldsAreEssential)\n                alert.error(message.allFieldsAreEssential);\n\n            if (message.mainboardNotAllowed)\n                alert.error(message.mainboardNotAllowed);\n\n            if (message.somethingWentWrong)\n                alert.error(message.somethingWentWrong);\n\n            if (message.passwordNotMatch) alert.error(message.passwordNotMatch);\n        }\n    }\n    render() {\n        return <Fragment />;\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    error: state.errors,\n    message: state.messages,\n});\n\nexport default connect(mapStateToProps)(withAlert()(Alerts));\n","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/errors.js",["187"],"import {GET_ERRORS} from '../actions/types';\n\nconst initialState = {\n    msg: {},\n    status:null\n}\n\nexport default function (state=initialState , action) {\n\n    switch (action.type) {\n        case GET_ERRORS:\n            return{\n                msg:action.payload.msg,\n                status: action.payload.status\n            }\n\n        default:\n            return state;\n    }\n}","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/messages.js",["188"],"import {CREATE_MESSAGE} from '../actions/types';\n\nconst initialState = {\n\n} \n\nexport default function (state=initialState , action) {\n\n    switch (action.type) {\n// will there be some other pieces\n        case CREATE_MESSAGE:\n            return (state=action.payload)\n        default:\n            return state;\n    }\n}","/home/sajad/Desktop/finalproject/frontend/src/components/layout/SearchBox.js",["189"],"import React , {Component}from 'react';\nimport { connect } from 'react-redux';\nimport {setSearchField} from '../../store/actions/search';\nimport mainboards from '../../store/reducers/mainboards';\n\nlet objectList = [];\n\nclass SearchBox extends Component {\n\n  componentDidMount(){\n    objectList = this.props.objectList;\n  }\n  render() {\n      return (\n        <div className='pa2 '>\n          <input\n            className='tc pa3 ba b--green bg-lightest-blue'\n            type='search'\n            placeholder='search by description'\n            onChange={this.props.onSearchChange}\n          />\n        </div>\n      );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchField ,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value,objectList))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBox);","/home/sajad/Desktop/finalproject/frontend/src/store/actions/search.js",[],"/home/sajad/Desktop/finalproject/frontend/src/store/reducers/search.js",[],"/home/sajad/Desktop/finalproject/frontend/src/components/accounts/Login.js",["190"],"import React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { login } from \"../../store/actions/auth\";\n\nexport class Login extends Component {\n    state = {\n        username: \"\",\n        password: \"\",\n    };\n\n    static propTypes = {\n        login: PropTypes.func.isRequired,\n        isAuthenticated: PropTypes.bool,\n    };\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        // console.log(this.state.username);\n        // console.log(this.state.password);\n\n        this.props.login(this.state.username, this.state.password);\n    };\n\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n\n    render() {\n        if (this.props.isAuthenticated) {\n            return <Redirect to=\"/\" />;\n        }\n        const { username, password } = this.state;\n        return (\n            <div className=\"col-md-6 m-auto\">\n                <br />\n                <br />\n                <br />\n                <br />\n                <div className=\"card card-body mt-5\">\n                    <h2 className=\"text-center\">Login</h2>\n                    <form onSubmit={this.onSubmit}>\n                        <div className=\"input-sm form-group\">\n                            <label>Username</label>\n                            <input\n                                type=\"text\"\n                                className=\"tc pa3 ba b--green bg-lightest-blue form-control\"\n                                name=\"username\"\n                                placeholder=\"username\"\n                                onChange={this.onChange}\n                                value={username}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label>Password</label>\n                            <input\n                                type=\"password\"\n                                placeholder=\"password\"\n                                className=\"tc pa3 ba b--green bg-lightest-blue form-control\"\n                                name=\"password\"\n                                onChange={this.onChange}\n                                value={password}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <button type=\"submit\" className=\"btn btn-primary\">\n                                Login\n                            </button>\n                        </div>\n                        <br />\n                        <br />\n                        <br />\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n","/home/sajad/Desktop/finalproject/frontend/src/components/accounts/RegisterMainboard.js",["191","192","193","194","195","196","197"],"import React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { registerMainboard } from \"../../store/actions/auth\";\nimport { createMessage } from \"../../store/actions/messages\";\n\nclass RegisterMainboard extends Component {\n    state = {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        password2: \"\",\n        description: \"\",\n    };\n\n    static propTypes = {\n        registerMainboard: PropTypes.func.isRequired,\n        isAuthenticated: PropTypes.bool,\n    };\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        const {\n            username,\n            email,\n            password,\n            password2,\n            description,\n        } = this.state;\n        if (\n            username == \"\" ||\n            email == \"\" ||\n            password == \"\" ||\n            password2 == \"\" ||\n            description == \"\"\n        ) {\n            this.props.createMessage({\n                allFieldsAreEssential: \"All fields should have value\",\n            });\n        } else if (password !== password2) {\n            this.props.createMessage({\n                passwordNotMatch: \"passwords do not match\",\n            });\n        } else {\n            const newMainboard = {\n                username,\n                password,\n                email,\n                description,\n            };\n            this.props.registerMainboard(newMainboard);\n        }\n    };\n\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n\n    render() {\n        const {\n            username,\n            email,\n            password,\n            password2,\n            description,\n        } = this.state;\n\n        return (\n            <div>\n                <div className=\"col-md-6 m-auto\">\n                    <br />\n                    <br />\n                    <div className=\"card card-body mt-5\">\n                        <h2 className=\"text-center\">Register Mainboard</h2>\n                        <form onSubmit={this.onSubmit}>\n                            <div className=\"form-group\">\n                                <label>Username</label>\n                                <input\n                                    placeholder=\"username\"\n                                    type=\"text\"\n                                    className=\"tc pa3 ba b--green bg-lightest-blue form-control\"\n                                    name=\"username\"\n                                    onChange={this.onChange}\n                                    value={username}\n                                />\n                            </div>\n                            <div className=\"form-group lg\">\n                                <label>Email</label>\n                                <input\n                                    placeholder=\"email\"\n                                    type=\"email\"\n                                    className=\"tc pa3 ba b--green bg-lightest-blue form-control\"\n                                    name=\"email\"\n                                    onChange={this.onChange}\n                                    value={email}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Password</label>\n                                <input\n                                    placeholder=\"password\"\n                                    type=\"password\"\n                                    className=\"tc pa3 ba b--green bg-lightest-blue form-control\"\n                                    name=\"password\"\n                                    onChange={this.onChange}\n                                    value={password}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Confirm Password</label>\n                                <input\n                                    placeholder=\"confirm password\"\n                                    type=\"password\"\n                                    className=\"tc pa3 ba b--green bg-lightest-blue form-control\"\n                                    name=\"password2\"\n                                    onChange={this.onChange}\n                                    value={password2}\n                                />\n                            </div>\n                            <div className=\"tc form-group\">\n                                <label>description</label>\n                                <input\n                                    placeholder=\"write a few lines about it\"\n                                    type=\"text\"\n                                    className=\"tc pa3 ba b--green bg-lightest-blue form-control\"\n                                    name=\"description\"\n                                    onChange={this.onChange}\n                                    value={description}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                >\n                                    Register\n                                </button>\n                            </div>\n                            <br />\n                            <br />\n                            <br />\n                            <br />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}   \n\nconst mapStateToProps = (state) => ({\n    isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { registerMainboard, createMessage })(\n    RegisterMainboard\n);\n","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/auth.js",["198"],"import {\n    USER_LOADED,\n    AUTH_ERROR,\n    USER_LOADING,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n} from \"../actions/types\";\n\nconst initialState = {\n    token: localStorage.getItem(\"token\"),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null,\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true,\n            };\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                isLoading: false,\n                user: action.payload,\n            };\n        case LOGIN_SUCCESS:\n            localStorage.setItem(\"token\", action.payload.token);\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                isLoading: false,\n            };\n        case AUTH_ERROR:\n        case LOGIN_FAIL:\n        case LOGOUT_SUCCESS:\n            localStorage.removeItem(\"token\");\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false,\n            };\n        default:\n            return state;\n    }\n}\n","/home/sajad/Desktop/finalproject/frontend/src/components/common/PrivateRoute.js",[],"/home/sajad/Desktop/finalproject/frontend/src/store/actions/auth.js",["199","200"],"import { host } from \"./host\";\nimport axios from \"axios\";\nimport { returnErrors, createMessage } from \"./messages\";\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_FAIL,\n    LOGIN_SUCCESS,\n    LOGOUT_SUCCESS,\n    REGISTER_MAINBOARD_SUCCESS,\n    REGISTER_MAINBOARD_FAIL,\n} from \"./types\";\n\n// CHECK TOKEN AND LOADING USER\nexport const loadUser = () => (dispatch, getState) => {\n    // USER LOADING\n    dispatch({ type: USER_LOADING });\n\n    axios\n        .get(host + \"/api/auth/user\", tokenConfig(getState))\n        .then((res) => {\n            // console.log(\"it really did\");\n            dispatch({\n                type: USER_LOADED,\n                payload: res.data,\n            });\n        })\n        .catch((err) => {\n            if (err.response !== undefined && err.response !== undefined)\n                dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR,\n            });\n        });\n};\n\n// LOGIN USER\nexport const login = (username, password) => (dispatch) => {\n    // Headers\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    };\n\n    // Request Body\n    const body = JSON.stringify({ username, password });\n\n    axios\n        .post(host + \"/api/auth/login\", body, config)\n        .then((res) => {\n            if (\n                res.data.user.is_mainboard == true &&\n                res.data.user.is_staff == false\n            ) {\n                dispatch(\n                    createMessage({\n                        mainboardNotAllowed: \"mainboards are not allowed !\",\n                    })\n                );\n            } else\n                dispatch({\n                    type: LOGIN_SUCCESS,\n                    payload: res.data,\n                });\n        })\n        .catch((err) => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: LOGIN_FAIL,\n            });\n        });\n};\n\n// LOGOUT USER\n\n// LOGOUT USER\nexport const logout = () => (dispatch, getState) => {\n    axios\n        .post(host + \"/api/auth/logout/\", null, tokenConfig(getState))\n        .then((res) => {\n            // dispatch({ type: \"CLEAR_LEADS\" });\n            dispatch({\n                type: LOGOUT_SUCCESS,\n            });\n        })\n        .catch((err) => {\n            if (err.response !== undefined && err.response !== undefined)\n                dispatch(returnErrors(err.response.data, err.response.status));\n        });\n};\n\n// Register MainboardUser and Mainboard\n\n// REGISTER USER\nexport const registerMainboard = ({\n    username,\n    password,\n    email,\n    description,\n}) => (dispatch, getState) => {\n    // Request Body\n    const body = JSON.stringify({ username, email, password });\n\n    axios\n        .post(host + \"/api/auth/register\", body, tokenConfig(getState))\n        .then((res) => {\n            const mainboard_user = res.data.user.id;\n            console.log(mainboard_user);\n            const mBody = JSON.stringify({ mainboard_user, description });\n            axios.post(\n                host + \"/api/mainboard/register\",\n                mBody,\n                tokenConfig(getState)\n            );\n        })\n        .then((newRes) => {\n            dispatch(\n                createMessage({\n                    mainboardRegistered: \"New mainboard registered!\",\n                })\n            );\n\n            dispatch({\n                type: REGISTER_MAINBOARD_SUCCESS,\n                payload: newRes.data,\n            });\n        })\n        .catch((err) => {\n            if (err.response !== undefined && err.response !== undefined)\n                dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: REGISTER_MAINBOARD_FAIL,\n            });\n        });\n};\n\n// Setup config with token - helper function\nexport const tokenConfig = (getState) => {\n    // Get token from state\n    const token = getState().auth.token;\n\n    // Headers\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    };\n\n    // If token, add to headers config\n    if (token) {\n        config.headers[\"Authorization\"] = `Token ${token}`;\n    }\n\n    return config;\n};\n","/home/sajad/Desktop/finalproject/frontend/src/store/actions/messages.js",[],"/home/sajad/Desktop/finalproject/frontend/src/components/layout/scroll.js",[],"/home/sajad/Desktop/finalproject/frontend/src/store/actions/relatedSensors.js",[],"/home/sajad/Desktop/finalproject/frontend/src/store/reducers/relatedSensors.js",["201"],"import { GET_RELATED_SENSORS, SAVE_MAINBOARD_ID } from \"../actions/types.js\";\n\nconst initialState = {\n    sensors: [],\n    mainboardID: \"\",\n    sensorTypes: [],\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_RELATED_SENSORS:\n            // console.log(`action id is ${action.relatedMainboard}`);\n            return {\n                ...state,\n                sensors: action.payload,\n                mainboardID: action.relatedMainboard,\n            };\n        case SAVE_MAINBOARD_ID:\n            return {\n                ...state,\n                mainboardID: action.relatedMainboard,\n            };\n\n        default:\n            return state;\n    }\n}\n","/home/sajad/Desktop/finalproject/frontend/src/components/sensors/SensorList.js",["202"],"import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport propTypes from \"prop-types\";\nimport { getRelatedSensors } from \"../../store/actions/relatedSensors\";\nimport { getSensorTypes } from \"../../store/actions/sensorTypes\";\nimport SensorCard from \"./SensorCard\";\nimport SearchBox from \"../layout/SearchBox\";\nimport Scroll from \"../layout/scroll\";\nimport relatedSensors from \"../../store/reducers/relatedSensors\";\n\nclass SensorList extends Component {\n\n    static propTypes = {\n        filteredSensors: propTypes.array.isRequired,\n        relatedSensors: propTypes.array.isRequired,\n        relatedMainboard: propTypes.string.isRequired,\n    };\n\n    componentDidMount() {\n        this.props.getRelatedSensors();\n        this.props.getSensorTypes();\n    }\n\n    render() {\n        let {\n            filteredSensors,\n            relatedSensors,\n            relatedMainboard,\n            sensorTypes,\n        } = this.props;\n        if (filteredSensors === undefined) filteredSensors = relatedSensors;\n        // console.log(`this is related mainboard ${relatedMainboard}`);\n        // console.log(relatedSensors);\n\n        return !relatedSensors.length ? (\n            <h1>Loading</h1>\n        ) : (\n            <Fragment>\n                <SearchBox objectList={this.props.relatedSensors} />\n\n                <Scroll className=\"tc\">\n                    <div>\n                        {filteredSensors.map((rs, i) => {\n                            return (\n                                <SensorCard\n                                    key={i}\n                                    id={rs.id}\n                                    description={rs.description}\n                                    type_id={rs.type_id}\n                                    relatedMainboard={relatedMainboard}\n                                    sensorTypes={sensorTypes}\n                                />\n                            );\n                        })}\n                    </div>\n                </Scroll>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    relatedSensors: state.relatedSensors.sensors,\n    relatedMainboard: state.relatedSensors.mainboardID,\n    filteredSensors: state.searchObjects.filteredObjects,\n    sensorTypes: state.sensorTypes.sensorTypes,\n});\n\nexport default connect(mapStateToProps, { getRelatedSensors, getSensorTypes })(\n    SensorList\n);\n","/home/sajad/Desktop/finalproject/frontend/src/components/sensors/SensorCard.js",["203"],"import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { getSensorValueItem } from \"../../store/actions/sensorValue\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nclass SensorCard extends Component {\n    render() {\n        let desc = \"Unknown Type\";\n        for (let i = 0; i < this.props.sensorTypes.length; i++) {\n            if (this.props.type_id == this.props.sensorTypes[i].id) {\n                desc = this.props.sensorTypes[i].description;\n            }\n        }\n        return (\n            <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw1 shadow-5\">\n                <Link to=\"/charts\">\n                    <Button\n                        onClick={this.props.getSensorValueItem.bind(\n                            this,\n                            this.props.relatedMainboard,\n                            this.props.id\n                        )}\n                        variant=\"primary\"\n                        size=\"lg\"\n                        active\n                    >\n                        see sensor values\n                    </Button>\n                </Link>\n                <br />\n                <h1>Sensor ID</h1> \n                <h4>{this.props.id}</h4>\n                <br />\n                <br />\n                <br />\n                <br />\n                <div>\n                    <h1>Sensor Type</h1>\n                    <h4>{desc}</h4>\n\n                    <hr></hr>\n\n                    <h5>description:</h5>\n                    <p>{this.props.description}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    mainboards: state.mainboards.mainboards,\n});\n\nexport default connect(mapStateToProps, { getSensorValueItem })(SensorCard);\n","/home/sajad/Desktop/finalproject/frontend/src/store/actions/sensorTypes.js",["204"],"import axios from \"axios\";\n\nimport { GET_ERRORS, GET_SENSOR_TYPES, REGISTER_SENSOR_TYPE } from \"./types\";\nimport { host } from \"./host\";\nimport { createMessage, returnErrors } from \"./messages\";\nimport { tokenConfig } from \"./auth\";\n// GET MAINBOARD LIST\n\nexport const registerSensorType = (description) => (dispatch, getState) => {\n    axios\n        .post(\n            host + \"/api/sensors/registersensortypes\",\n            description,\n            tokenConfig(getState)\n        )\n        .then((res) => {\n            dispatch(\n                createMessage({\n                    sensorRegistered: \"New sensor type registered!\",\n                })\n            );\n        })\n        .catch((err) => {\n            const errors = {\n                msg: err.response.data,\n                status: err.response.status,\n            };\n\n            dispatch(returnErrors(err.response.data, err.response.status));\n\n            dispatch({\n                type: GET_ERRORS,\n                payload: errors,\n            });\n        });\n};\nexport const getSensorTypes = () => (dispatch, getState) => {\n    axios\n        .get(\n            host+\"/api/sensors/registersensortypeslist\",\n            tokenConfig(getState)\n        )\n        .then((res) => {\n            // console.log(`this is ${id}`);\n            dispatch({\n                type: GET_SENSOR_TYPES,\n                payload: res.data,\n            });\n        })\n        .catch((err) => {\n            dispatch(\n                createMessage({\n                    somethingWentWrong: \"something went wrong. refresh !\",\n                })\n            );\n        });\n};\n","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/sensorTypes.js",["205"],"import { GET_SENSOR_TYPES } from \"../actions/types.js\";\n\nconst initialState = {\n    sensorTypes: [],\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_SENSOR_TYPES:\n            // console.log(`action id is ${action.relatedMainboard}`);\n            return {\n                ...state,\n                sensorTypes: action.payload,\n            };\n        \n\n        default:\n            return state;\n    }\n}\n","/home/sajad/Desktop/finalproject/frontend/src/components/charts/Chart.js",["206","207"],"import React, { Component } from \"react\";\nimport { Bar, Line, Pie } from \"react-chartjs-2\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { host } from \"../../store/actions/host\";\nclass Chart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            vlaues: [],\n            chartData: [],\n        };\n    }\n\n    // Setup config with token - helper function\n    tokenConfig = () => {\n        // Get token from state\n        const token = this.props.token;\n\n        // Headers\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n\n        // If token, add to headers config\n        if (token) {\n            config.headers[\"Authorization\"] = `Token ${token}`;\n        }\n\n        return config;\n    };\n    static defaultProps = {\n        displayTitle: true,\n        displayLegend: true,\n        legendPosition: \"right\",\n    };\n\n    componentWillMount() {\n        axios\n            .get(\n                `${host}/api/sensors/value?mainboard_id=${this.props.mainboard_id}&sensor_id=${this.props.sensor_id}`,\n                this.tokenConfig()\n            )\n            .then((res) => {\n                this.setState({ values: res.data });\n                this.getChartData();\n            });\n    }\n\n    getChartData = () => {\n        let sensorValues = [];\n        let labelValues = [];\n        for (let i = 0; i < this.state.values.length; i++) {\n            sensorValues[i] = this.state.values[i].value;\n            labelValues[i] = this.state.values[i].time_stamp.toString();\n        }\n        if (sensorValues.length > 100) {\n            labelValues = labelValues.slice(\n                Math.max(labelValues.length - 99, 1)\n            );\n            sensorValues = sensorValues.slice(\n                Math.max(sensorValues.length - 99, 1)\n            );\n        }\n\n        // console.log(this.props.values);\n        // console.log(`lables ${labelValues}`);\n        // console.log(`sensorValues ${sensorValues}`);\n        this.setState({\n            chartData: {\n                labels: labelValues,\n                datasets: [\n                    {\n                        label: \"line chart\",\n                        data: sensorValues,\n                        backgroundColor: [\n                            \"rgba(255, 99, 132, 0.6)\",\n                            \"rgba(54, 162, 235, 0.6)\",\n                            \"rgba(255, 206, 86, 0.6)\",\n                            \"rgba(75, 192, 192, 0.6)\",\n                            \"rgba(153, 102, 255, 0.6)\",\n                            \"rgba(255, 159, 64, 0.6)\",\n                            \"rgba(255, 99, 132, 0.6)\",\n                        ],\n                        borderWidth: 2,\n                        borderColor: \"#777\",\n                    },\n                ],\n            },\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"chart\">\n                <Line\n                    data={this.state.chartData}\n                    options={{\n                        title: {\n                            display: true,\n                            text: \"Chart Of Sensor Values \",\n                            fontSize: 25,\n                        },\n                        legend: {\n                            display: true,\n                            position: \"top\",\n                        },\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    mainboard_id: state.sensorValueItem.mainboard_id,\n    sensor_id: state.sensorValueItem.sensor_id,\n    token: state.auth.token,\n});\n\nexport default connect(mapStateToProps)(Chart);\n","/home/sajad/Desktop/finalproject/frontend/src/store/actions/sensorValue.js",["208"],"import axios from \"axios\";\n\nimport { GET_SENSOR_VALUE_ITEM } from \"./types\";\n\n// GET MAINBOARD LIST\n\nexport const getSensorValueItem = (mainboardID, sensorID) => ({\n    type: GET_SENSOR_VALUE_ITEM,\n    mainboard_id: mainboardID,\n    sensor_id: sensorID,\n});\n","/home/sajad/Desktop/finalproject/frontend/src/components/charts/Table.js",["209"],"import React, { Component, Fragment } from \"react\";\nimport Chart from \"./Chart\";\nimport Scroll from \"../layout/scroll\";\nclass Table extends Component {\n    render() {\n        return (\n            <div className=\"container card card-body mt-3\">\n                <Scroll>\n                    <Chart />\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default Table;\n","/home/sajad/Desktop/finalproject/frontend/src/store/reducers/sensorValueItem.js",["210"],"import { GET_SENSOR_VALUE_ITEM } from \"../actions/types.js\";\n\nconst initialState = {\n    sensor_id: null,\n    mainboard_id: null,\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_SENSOR_VALUE_ITEM:\n            return {\n                ...state,\n                mainboard_id: action.mainboard_id,\n                sensor_id: action.sensor_id,\n            };\n        default:\n            return state;\n    }\n}\n","/home/sajad/Desktop/finalproject/frontend/src/components/accounts/RegisterSensorType.js",[],"/home/sajad/Desktop/finalproject/frontend/src/components/sensors/SensorTypeList.js",[],"/home/sajad/Desktop/finalproject/frontend/src/components/sensors/SensorTypeCard.js",[],"/home/sajad/Desktop/finalproject/frontend/src/components/mainboards/RegisterNewSensor.js",["211"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { registerNewSensor } from \"../../store/actions/relatedSensors\";\nimport SensorTypeList from \"../sensors/SensorTypeList\";\nimport { createMessage } from \"../../store/actions/messages\";\n\nclass RegisterNewSensor extends Component {\n    state = {\n        description: \"\",\n        type_id: 0,\n    };\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        const { description, type_id } = this.state;\n        if (description == \"\") {\n            this.props.createMessage({\n                allFieldsAreEssential: \"All fields should have value\",\n            });\n        } else {\n            const mainboard_id = this.props.mainboard_id;\n            // console.log(\"here\");\n            // console.log(mainboard_id);\n            const lead = { type_id, mainboard_id, description };\n            this.props.registerNewSensor(lead);\n            this.setState({\n                description: \"\",\n                type_id: 0,\n            });\n        }\n    };\n\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n\n    render() {\n        const { description, type_id } = this.state;\n        return (\n            <div className=\"container\">\n                <div className=\"col-md-6 m-auto\">\n                    <br />\n                    <div className=\"card card-body mt-5\">\n                        <h2 className=\"text-center\">Register Sensor</h2>\n                        <form onSubmit={this.onSubmit}>\n                            <div className=\"input-sm form-group\">\n                                <label>\n                                    write a description(like gas sensor in room\n                                    2)\n                                </label>\n                                <div className=\"form-group\">\n                                    <label>type id</label>\n                                    <input\n                                        placeholder=\"username\"\n                                        type=\"text\"\n                                        className=\"tc pa3 ba b--green bg-lightest-blue form-control\"\n                                        name=\"type_id\"\n                                        onChange={this.onChange}\n                                        value={type_id}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>description</label>\n                                    <input\n                                        type=\"text\"\n                                        className=\"tc pa3 ba b--green bg-lightest-blue form-control\"\n                                        name=\"description\"\n                                        placeholder=\"description\"\n                                        onChange={this.onChange}\n                                        value={description}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <button\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                >\n                                    Register\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n                <SensorTypeList />\n            </div>\n        );\n    }\n}\nconst mapStateToProps = (state) => ({\n    mainboard_id: state.relatedSensors.mainboardID,\n});\n\nexport default connect(mapStateToProps, { registerNewSensor, createMessage })(\n    RegisterNewSensor\n);\n","/home/sajad/Desktop/finalproject/frontend/src/store/actions/host.js",[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":32,"column":21,"nodeType":"218","endLine":35,"endColumn":22},{"ruleId":"219","severity":1,"message":"220","line":1,"column":28,"nodeType":"221","messageId":"222","endLine":1,"endColumn":36},{"ruleId":"219","severity":1,"message":"223","line":11,"column":5,"nodeType":"221","messageId":"222","endLine":11,"endColumn":13},{"ruleId":"224","severity":1,"message":"225","line":7,"column":1,"nodeType":"226","endLine":19,"endColumn":2},{"ruleId":"219","severity":1,"message":"227","line":8,"column":8,"nodeType":"221","messageId":"222","endLine":8,"endColumn":18},{"ruleId":"219","severity":1,"message":"228","line":4,"column":10,"nodeType":"221","messageId":"222","endLine":4,"endColumn":20},{"ruleId":"229","severity":1,"message":"230","line":15,"column":19,"nodeType":"231","messageId":"232","endLine":15,"endColumn":21},{"ruleId":"224","severity":1,"message":"225","line":8,"column":1,"nodeType":"226","endLine":20,"endColumn":2},{"ruleId":"224","severity":1,"message":"225","line":7,"column":1,"nodeType":"226","endLine":16,"endColumn":2},{"ruleId":"219","severity":1,"message":"227","line":4,"column":8,"nodeType":"221","messageId":"222","endLine":4,"endColumn":18},{"ruleId":"219","severity":1,"message":"233","line":2,"column":10,"nodeType":"221","messageId":"222","endLine":2,"endColumn":14},{"ruleId":"219","severity":1,"message":"233","line":2,"column":10,"nodeType":"221","messageId":"222","endLine":2,"endColumn":14},{"ruleId":"219","severity":1,"message":"223","line":2,"column":16,"nodeType":"221","messageId":"222","endLine":2,"endColumn":24},{"ruleId":"229","severity":1,"message":"234","line":32,"column":22,"nodeType":"231","messageId":"232","endLine":32,"endColumn":24},{"ruleId":"229","severity":1,"message":"234","line":33,"column":19,"nodeType":"231","messageId":"232","endLine":33,"endColumn":21},{"ruleId":"229","severity":1,"message":"234","line":34,"column":22,"nodeType":"231","messageId":"232","endLine":34,"endColumn":24},{"ruleId":"229","severity":1,"message":"234","line":35,"column":23,"nodeType":"231","messageId":"232","endLine":35,"endColumn":25},{"ruleId":"229","severity":1,"message":"234","line":36,"column":25,"nodeType":"231","messageId":"232","endLine":36,"endColumn":27},{"ruleId":"224","severity":1,"message":"225","line":17,"column":1,"nodeType":"226","endLine":53,"endColumn":2},{"ruleId":"229","severity":1,"message":"234","line":54,"column":44,"nodeType":"231","messageId":"232","endLine":54,"endColumn":46},{"ruleId":"229","severity":1,"message":"234","line":55,"column":40,"nodeType":"231","messageId":"232","endLine":55,"endColumn":42},{"ruleId":"224","severity":1,"message":"225","line":9,"column":1,"nodeType":"226","endLine":27,"endColumn":2},{"ruleId":"219","severity":1,"message":"235","line":9,"column":8,"nodeType":"221","messageId":"222","endLine":9,"endColumn":22},{"ruleId":"229","severity":1,"message":"234","line":10,"column":36,"nodeType":"231","messageId":"232","endLine":10,"endColumn":38},{"ruleId":"219","severity":1,"message":"236","line":3,"column":40,"nodeType":"221","messageId":"222","endLine":3,"endColumn":60},{"ruleId":"224","severity":1,"message":"225","line":7,"column":1,"nodeType":"226","endLine":20,"endColumn":2},{"ruleId":"219","severity":1,"message":"237","line":2,"column":10,"nodeType":"221","messageId":"222","endLine":2,"endColumn":13},{"ruleId":"219","severity":1,"message":"238","line":2,"column":21,"nodeType":"221","messageId":"222","endLine":2,"endColumn":24},{"ruleId":"219","severity":1,"message":"239","line":1,"column":8,"nodeType":"221","messageId":"222","endLine":1,"endColumn":13},{"ruleId":"219","severity":1,"message":"220","line":1,"column":28,"nodeType":"221","messageId":"222","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"225","line":8,"column":1,"nodeType":"226","endLine":19,"endColumn":2},{"ruleId":"229","severity":1,"message":"234","line":17,"column":25,"nodeType":"231","messageId":"232","endLine":17,"endColumn":27},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'mainboards' is defined but never used.","'GET_ERRORS' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Link' is defined but never used.","Expected '===' and instead saw '=='.","'relatedSensors' is defined but never used.","'REGISTER_SENSOR_TYPE' is defined but never used.","'Bar' is defined but never used.","'Pie' is defined but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation"]